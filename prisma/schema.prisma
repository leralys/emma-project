// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL") // Neon pooled
  directUrl = env("DIRECT_URL") // Neon direct
}

enum Role {
  admin
  user
}

model User {
  id           String   @id @default(cuid())
  name         String?
  passwordHash String? // Only for admins
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  roles        UserRole[]
  devices      Device[]
  participants ThreadParticipant[]
  messages     Message[]            @relation("UserMessages")
  readReceipts MessageReadReceipt[]
  claimCodes   DeviceClaimCode[]

  @@map("users")
}

model UserRole {
  userId String
  role   Role

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, role])
  @@map("user_roles")
}

model Device {
  id           String   @id @default(cuid())
  userId       String
  keyHash      String   @unique
  revoked      Boolean  @default(false)
  timezone     String?  @default("UTC") // IANA timezone (e.g., "America/New_York", "Europe/London")
  pushEndpoint String?
  pushP256dh   String?
  pushAuth     String?
  createdAt    DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("devices")
}

model DeviceClaimCode {
  code      String    @id // Short code like "XK7P-M9Q2"
  userId    String // User this device will belong to
  expiresAt DateTime
  claimed   Boolean   @default(false)
  claimedAt DateTime?
  deviceId  String? // Device that claimed this code (for audit trail)
  createdAt DateTime  @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([code, claimed])
  @@index([userId])
  @@map("device_claim_codes")
}

model Thread {
  id           String              @id @default(cuid())
  title        String?
  createdAt    DateTime            @default(now())
  participants ThreadParticipant[]
  messages     Message[]

  @@map("threads")
}

model ThreadParticipant {
  threadId String
  userId   String

  thread Thread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([threadId, userId])
  @@index([userId])
  @@map("thread_participants")
}

model Message {
  id             String    @id @default(cuid())
  threadId       String
  senderId       String
  scheduledAtUTC DateTime? // Only set by admin for scheduled messages
  delivered      Boolean   @default(false)
  deliveredAtUTC DateTime?
  ciphertext     Bytes
  iv             Bytes
  salt           Bytes
  mediaUrls      String[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  thread       Thread               @relation(fields: [threadId], references: [id], onDelete: Cascade)
  sender       User                 @relation("UserMessages", fields: [senderId], references: [id], onDelete: Cascade)
  readReceipts MessageReadReceipt[]

  @@index([scheduledAtUTC])
  @@index([delivered, threadId])
  @@index([scheduledAtUTC, delivered]) // For admin: find scheduled but not delivered
  @@map("messages")
}

model MessageReadReceipt {
  messageId String
  userId    String
  readAtUTC DateTime @default(now()) // Auto-set to current UTC time when receipt is created

  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([messageId, userId])
  @@index([userId]) // For user: find what I've read
  @@index([messageId]) // For message: who read this
  @@map("message_read_receipts")
}
